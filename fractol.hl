#ifndef FRACTOL_HL
# define FRACTOL_HL

#define X1 -2.1
#define X2 0.6
#define Y2 1.2
#define Y1 -1.2
#define WIDTH 1920
#define HEIGHT 1080
#define OPP 4

#if defined(MODE_PRECI)
	#define V_PRECI double
#else
	#define V_PRECI float
#endif

typedef struct		s_px
{
	int			r;
	int			g;
	int			b;
}					t_px;

typedef struct		s_hsv
{
	float		rf;
	float		gf;
	float		bf;
	float		i;
	float		min;
	float		f;
	float		down;
	float		up;
}					t_hsv;

int         mlxji_hsv_to_rgb(t_px *px, float h, float s, float v);

static void	h0_to_h3(float h, float v, t_hsv *hsv)
{
	if (h < 1)
	{
		hsv->rf = v;
		hsv->gf = hsv->up;
		hsv->bf = hsv->min;
	}
	else if (h >= 1 && h < 2)
	{
		hsv->rf = hsv->down;
		hsv->gf = v;
		hsv->bf = hsv->min;
	}
	else if (h >= 2 && h < 3)
	{
		hsv->rf = hsv->min;
		hsv->gf = v;
		hsv->bf = hsv->up;
	}
}

static void	h3_to_h6(float h, float v, t_hsv *hsv)
{
	if (h >= 3 && h < 4)
	{
		hsv->rf = hsv->min;
		hsv->gf = hsv->down;
		hsv->bf = v;
	}
	else if (h >= 4 && h < 5)
	{
		hsv->rf = hsv->up;
		hsv->gf = hsv->min;
		hsv->bf = v;
	}
	else if (h >= 5 && h < 6)
	{
		hsv->rf = v;
		hsv->gf = hsv->min;
		hsv->bf = hsv->down;
	}
}

int			mlxji_hsv_to_rgb(t_px *px, float h, float s, float v)
{
	t_hsv	hsv;

	h = h * 3.14 / 180;
	hsv.i = (int)h;
	hsv.f = h - hsv.i;
	hsv.min = v * (1 - s);
	hsv.down = v * (1 - hsv.f * s);
	hsv.up = v * (1 - (1 - hsv.f) * s);
	if (h >= 0 && h < 3)
	{
		h0_to_h3(h, v, &hsv);
	}
	else if (h >= 3 && h < 6)
	{
		h3_to_h6(h, v, &hsv);
	}
	else if (h > 6)
	{
		hsv.rf = v;
		hsv.gf = hsv.min;
		hsv.bf = hsv.up;
	}
	px->r = hsv.rf * 255;
	px->g = hsv.gf * 255;
	px->b = hsv.bf * 255;
	return (0);
}

#endif
